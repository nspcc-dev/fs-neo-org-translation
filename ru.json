{
	"Audit": {
		"DataAudit": {
			"p1": "How does NeoFS ensure data is not lost or corrupted? Each epoch, Inner Ring nodes perform Data Audit. It is a two-stage game in terms of game theory. At the first stage, nodes in a selected container are asked to collectively reconstruct a list of homomorphic hashes that would form a composite hash stored in storage group. By doing this, nodes demonstrate that they have all objects and are able to provide hash of those objects. The provided list of hashes can be validated, but at this stage, it is unknown, if some nodes are lying.",
			"p2": "At the next stage, it is necessary to make sure that nodes are honest and do not fake check results. Inner  Ring nodes calculate a set of nodes’ pairs that store the same objects and ask each node to provide thee homomorphic hashes of this object. Ranges are chosen in a way that the hash of a range asked from one node would be the composite hash of ranges asked from another node in that pair. Nodes cannot predict objects or ranges that would be chosen for audit. They cannot even predict a pair node for the game. This stage discovers malicious nodes fast because each node is serving multiple containers and storage groups and participates in many data audit sessions. When node is caught in a lie it will not get any rewards for this epoch. So the price of faking checks and risks is too high and it is easier and cheaper for the node to be honest and behave correctly.",
			"p3": "Combining the fact of nodes being able to reconstruct the storage group's composite hash and the fact of nodes' honest behavior, the system can consider that data is safely stored, not corrupted and available with a high probability.",
			"title": "Data Audit"
		},
		"ZeroKnowledge": {
			"p1": "In case of a large number of objects in a distributed network of untrusted nodes with an ever-changing topology, classical approach with comparing objects' hashes with some sample in a central meta-data storage is not efficient. This causes unacceptable overhead.",
			"p2": "To solve this problem, NeoFS uses Homomorphic hashing. It is a special type of hashing algorithms that allows computing the hash of a composite block from the hashes of individual blocks.",
			"p3": "For integrity checks, NeoFS calculates a composite homomorphic hash of all the objects in a group under control and puts it into a structure called Storage Group. During integrity checks, NeoFS nodes can ensure that hashes of stored objects are correct and a part of that initially created composite hash. This can be done without moving object's data over the network and no matter how many objects are in a storage group, the hash size is the same.",
			"title": "Zero-knowledge and Homomorphic hashing"
		}
	},
	"Features": {
		"BasicComponent": {
			"p1": "NeoFS network nodes run the same software and talk the same protocol but may have different roles. There are nodes that store data and process user API requests, they are regular storage nodes and form the Outer Ring. There are nodes that take care of network health, perform service tasks such as data audit and payments settlements and form the Inner Ring. There are not many of them and they use dBFT 2.0 consensus algorithm to coordinate their actions.",
			"read": "Read more",
			"title": "Basic components and network"
		},
		"ChaoticEnvironment": {
			"p1": "The bigger the NeoFS network grows, the more stable it becomes, because the chance of network is changed would affect the particular container is decreasing with the increasing number of nodes in the network. It means, unlike in DHT approach, the amount of needed data migration decreases with the network growth.",
			"title": "Designed to work reliably in chaotic environment"
		},
		"Control": {
			"card1": {
				"text": "your data is stored",
				"title": "Where"
			},
			"card2": {
				"text": "your data is stored",
				"title": "How"
			},
			"card3": {
				"text": "can get access to your data",
				"title": "Who"
			},
			"p1": "Since anyone may participate in NeoFS network, reliable mechanisms to ensure users' data consistency and availability in a chaotic environment are needed.",
			"p2": "To achieve this goal, the combination of homomorphic hashing for data integrity checks and game theory models, to create a situation where all nodes behave correctly and the data is stored safely, is used.",
			"p3": "A decentralized nature of NeoFS eliminates not only centralized points of failure but also centralized points of control. In NeoFS, only users have full control over their data, where, how it is stored, and who can get access to it.",
			"title": "NeoFS puts the control over data in users’ hands"
		},
		"Hardware": {
			"p1": "NeoFS is designed to work on commodity hardware without any special hardware requirements. This allows users to quickly replace failed system components with what can be bought in a local computer store.",
			"title": "Runs on commodity hardware"
		},
		"IncentiveModel": {
			"p1": "Incentive model and pricing follow a free market principle. Each node declares how much it wants to receive as a reward for data storage services for the upcoming epoch. Placement function considers the declared price and prefers nodes with better prices. However, since nodes in Network Map declare key-value attributes describing their parameters, such as geographical location, type of storage, capacity and other things also used in Storage Policy, it leaves room for nodes that want higher price, better or unique services to still get into the placement function result.",
			"p2": "In short, if node is too greedy, it does not get users and rewards. To have higher prices the node needs to satisfy market demand or provide something unique.",
			"p3": "As it is shown on the figure below, node needs to keep price \"in the market\" to get the highest profit. This should guarantee a competitive price for data storage in NeoFS.",
			"title": "Incentive model based on market principles"
		},
		"Integration": {
			"p1": "NeoFS is demonstrating NEO’s commitment to practical idealism as well as its vision of an integrated, user-centric Internet of the future.",
			"p2": "Through gateways (protocol adapters), users can easily access NeoFS through industry-standard protocols such as HTTP or S3.",
			"p3": "Moreover, the open nature of NeoFS enables users to freely write his or her own gates to integrate with third-party system for seamless on and off-chain integration as well as unmatched accessibility.",
			"title": "Integrated with popular protocols such as HTTP and S3"
		},
		"Introduction": {
			"p1": "NeoFS is a distributed, decentralized object storage network developed by <a href=\"https://nspcc.ru/en\" target=\"_blank\">Neo SPCC</a>.  Built with Neo blockchain integration in mind, NeoFS aims to support the shift away from third-party storage providers, providing users with complete control over their data.",
			"p2": "Nodes are organized in  peer-to-peer network that takes care of storing and distributing user's data. Any Neo user may participate in NeoFS network and get paid for providing storage resources to other users or store his data in NeoFS and pay a competitive price for it.",
			"p3": "The service is designed to work with Neo smart contracts, allowing for truly decentralized applications, and can also be used as a content  delivery network. Users can rent out storage in return for Neo GAS tokens or use GAS to store files in the network.",
			"p4": "Representing Neo’s commitment to building the future, NeoFS offers unparalleled data storage  control to users and developers by bringing together the benefits of decentralization and real-world integration.",
			"p5": "NeoFS ensures user data security and mitigates against malignant nodes by ensuring zero-knowledge data validation through a combination of homomorphic cryptography and game theory models.",
			"title": "Introduction"
		},
		"KeyBenefits": {
			"p1": "Infinitely scalable due to Network Map and Data Placement mechanisms",
			"p2": "Designed to work reliably in chaotic environment",
			"p3": "Users have full control over how their data is stored and distributed",
			"p4": "Integrated with popular protocols such as HTTP and S3",
			"p5": "Zero-knowledge data validation based on homomorphic cryptography",
			"p6": "Directly accessible from smart contract code",
			"p7": "Neo GAS is used for payments rather than custom tokens",
			"p8": "Incentive model based on market principles where all peers agree on prices",
			"p9": "Runs on commodity hardware",
			"title": "Key benefits and competitive advantages"
		},
		"Payment": {
			"p1": "NeoFS uses GAS for all payments. To be able to pay for storage services in NeoFS, the one has to deposit some GAS to NeoFS smart contract address. This event is monitored by Inner Ring nodes and reflected in user's account balance internally in NeoFS.",
			"p2": "NeoFS Inner Ring nodes keep track of all NeoFS accounts and use dBFT 2.0 consensus algorithm, the same as in Neo blockchain, agree on users' mutual settlements, reward distribution over node owners and other payment-related procedures.",
			"read": "Read more",
			"title": "Neo GAS is used for payments"
		},
		"RealWorld": {
			"p1": "Unlike many other projects in this area, <a href=\"https://nspcc.ru/en\" target=\"_blank\">NeoSPCC</a> is not trying to create a parallel reality in a technological sense. Solving real-world problems requires to use standard protocols and have ability to integrate NeoFS with existing systems. There are protocol adapters, or gateways, that allow accessing NeoFS via standard HTTP or S3 protocols. Users can develop their own gateways to integrate NeoFS with existing systems they are using, such as accounting system, CRM, a corporate backup service etc.",
			"title": "NeoFS is geared for real-world applications"
		},
		"Scalability": {
			"p1": "NeoFS is infinitely horizontaly scalable due to its architecture features such as novel Data Audit algorithm, Data Placement and Network Map.",
			"p2": "Network Map is a multi-dimensional graph where nodes have attributes and are grouped by those attributes and their values. This allows using a special data placement function to find nodes that would store an object, when putting or getting it to/from NeoFS network without any network requests.",
			"p3": "This approach allows not having any centralized meta-data storage keeping object's locations and not re-balancing data with every joining or leaving storage node.",
			"title": "Infinitely scalable due to Network Map and Data Placement"
		},
		"SmartContract": {
			"p1": "This feature becomes available in Neo 3.0 release with introduction of Oracles Protocol. Smart contracts will be able to issue GET and PUT requests for fixed-size objects.",
			"title": "Directly accessible from smart contract code"
		},
		"ZK": {
			"p1": "In case of a large number of objects in a distributed network of untrusted nodes with an ever-changing topology, classical approach with comparing objects' hashes with some sample in a central meta-data storage is not efficient. This causes unacceptable overhead.",
			"p2": "To solve this problem, NeoFS uses homomorphic hashing. It is a special type of hashing algorithms that allows computing the hash of a composite block from the hashes of individual blocks.",
			"read": "Read more",
			"title": "Zero-knowledge data validation based on homomorphic cryptography"
		}
	},
	"GAS": {
		"IncentiveModel": {
			"p1": "Incentive model and pricing follows a free market principles. Each node declares how much it wants to receive as a reward for data storage services for the upcoming epoch. Placement function considers the declared price and prefers nodes with better prices. However, because nodes in Network Map declare key-value attributes describing their parameters, such as geographical location, type of storage, capacity and other things also used in Storage Policy, it leaves room for nodes that want higher price, better or unique services to still get into the placement function result.",
			"p2": "In short, if node is too greedy it does not get users and rewards. To achieve higher prices, node needs to satisfy market demand or provide something unique.",
			"p3": "As it is shown on the figure above, the node needs to keep price \"in the market\" to get the highest profit. This should guarantee a competitive price for data storage in NeoFS.",
			"title": "Incentive model"
		},
		"Input": {
			"p1": "NeoFS uses Neo GAS for all payments. To be able to pay for storage services in NeoFS, the one has to deposit some GAS to NeoFS smart contract address. This event is monitored by Inner Ring nodes and reflected in user's account balance internally in NeoFS.",
			"p2": "NeoFS Inner Ring nodes keep track of all NeoFS accounts and use dBFT 2.0 consensus algorithm, the same as in Neo blockchain, agree on users' mutual settlements, reward distribution over node owners and other payment-related procedures.",
			"p3": "For instance, someone may own a few storage nodes and provide storage services, but at the same time use NeoFS for storing his or her backups in different geographical locations. In this case, rewards from storage nodes may be used to pay for backups automatically without transactions in Neo Blockchain.",
			"title": "Neo GAS token input"
		},
		"Withdraw": {
			"p1": "It is possible to withdraw GAS accumulated inside NeoFS to Neo Blokchain address. To do so, the user has to issue withdraw call to NeoFS. Inner Ring nodes lock the desired amount and issue a cheque signed by all Inner Ring nodes. Then the user has to invoke NeoFS smart contract, providing it with this cheque. If it is verified successfully smart contract will send GAS to the user's address and Inner Ring nodes will reflect those changes in the internal account balance. If cheque is not used during validity period GAS locked for withdrawal will be unlocked.",
			"title": "Neo GAS token withdraw"
		}
	},
	"Header": {
		"Main": {
			"title": "NeoFS: распределенная децентрализованная объектная система хранения данных"
		}
	},
	"HowTo": {
		"CLI": {
			"p1": "Check balance",
			"p2": "If you have not sent NEP-5 tokens by `Deposit` invocation of 0xcdabc9be4bfbc2ca4696e6cd6da3af104f929601 smart contract use <a href=\"/wallet\" target=\"_blank\"> our simple wallet</a> for NeoFS testnet or your custom token.",
			"p3": "Create container",
			"p4": "Upload object to container",
			"p5": "Create Storage group",
			"p6": "Any number of objec IDs can be added to the storage group creation command.",
			"p7": "Get object",
			"p8": "Open object by HTTP gate url",
			"p9": "Additional information is available in <a href=\"https://github.com/nspcc-dev/neofs-local/blob/master/neofs-local/HOWTO.md\" target=\"_blank\">github HowTo file</a>.",
			"title": "NeoFS CLI first steps"
		},
		"Deposit": {
			"p1": "Select the Deposit tab in the NeoFS wallet. Enter the amount of NEP-5 GAS tokens for deposit to NeoFS balance and click on the \"Deposit\" button.",
			"title": "Deposit NEP-5 GAS to NeoFS"
		},
		"RunCLI": {
			"p1": "Get <a href=\"https://github.com/nspcc-dev/neofs-local\" target=\"_blank\">neofs-local repository</a>",
			"p2": "Volume directory is './data'. Add files to have access from docker. In the docker this dir will be available in the root - `/data`.",
			"p3": "Run NeoFS CLI",
			"p4": "Declare NeoFS endpoint for CLI",
			"p5": "Can be declared your own NeoFS node or default as in example below.",
			"p6": "We recommend choosing either your own node or the closest one possible. Available nodes <a href=\"/services/testnet\" target=\"_blank\"> can be found here</a>.",
			"p7": "Declare your private key for CLI by WIF",
			"title": "Run NeoFS CLI"
		},
		"Wallet": {
			"p1": "RPC endpoint http://fs.nspcc.ru:30333 can be used for custom wallets.",
			"p2": "Open <a href=\"/wallet\" target=\"_blank\" > NeoFS Testnet Wallet</a> ",
			"p3": "Open an existing wallet by providing private key/WIF or create a new wallet and click on the \"Request tokens\" button. Or use neo-python. A description of how to do this is available <a href=\"/howto/py\" target=\"_blank\" > here</a>. It is possible to request tokens for your address <a href=\"/tokens\" target=\"_blank\" > here</a> in case of a custom wallet.",
			"title": "Wallet"
		},
		"title": "How to deposit NEP-5 GAS to NeoFS"
	},
	"HowToPython": {
		"Address": {
			"p1": "Run neo-python wallet",
			"p2": "Run pip install for first execution",
			"p3": "Create wallet",
			"p4": "Now you can find NEO address and public key in the NeoFS TestNet:",
			"p5": "Add NEP-5 GAS token information to the wallet",
			"p6": "Use `wallet export wif &lt;address&gt;` to get WIF for Neo address. For example:",
			"title": "Get Neo address"
		},
		"Deposit": {
			"p1": "To deposit GAS to the NeoFS smart contract need to run contract 0x{{neofs_sc}} method `Deposit` with options: public key, GAS amount.",
			"p2": "For example:",
			"title": "Deposit NEP-5 GAS to NeoFS"
		},
		"Wallet": {
			"p1": "RPC endpoint http://fs.nspcc.ru:30333 can be used for custom wallets.",
			"p2": "All the examples below will be for neo-python.",
			"p3": "Use pre-configured <a href=\"https://github.com/nspcc-dev/neo-python\" target=\"_blank\">neo-python</a>:",
			"p4": "or get default <a href=\"https://github.com/CityOfZion/neo-python\" target=\"_blank\">neo-python</a>: and change config file neo/data/protocol.privnet.json <a href=\"https://github.com/nspcc-dev/neo-python/blob/master/neo/data/protocol.privnet.json\" target=\"_blank\">to this</a>:",
			"title": "Wallet"
		},
		"title": "How to deposit NEP-5 GAS to NeoFS (Python Neo-cli)"
	},
	"Navigation": {
		"Top": {
			"audit": "Data Audit",
			"developers": "Developers",
			"features": "Features",
			"incentive": "Incentive Model",
			"network": "Network",
			"tokens": "Get TestNet GAS"
		}
	},
	"Network": {
		"Environment": {
			"p1": "As files are organized in directories in file system, objects are organized in containers in NeoFS.",
			"p2": "Each container is served by a subset of storage nodes that satisfy storage policy defined for this particular container by the user. To calculate that nodes’ subset, storage policy filters are applied to Network Map. The resulting set of nodes is responsible for making sure that storage policy is satisfied and data is not corrupted. In case of success, they share users' payment for data storage. One storage node may serve many containers, so if it behaves correctly small shares from each container summ-up in a significant reward. The same is true for the losses in case of container nodes' misbehavior. This motivates nodes to keep an eye on other container members and properly perform all required replication, migration and data recovery processes.",
			"p3": "Another non-obvious benefit of this approach is the bigger NeoFS network grows, the more stable it becomes, because the chance of network is changed would affect a particular container is decreasing with the increasing number of nodes in the network. It means, unlike in DHT approach, the amount of needed data migration decreases with network growth.",
			"title": "Work reliably in chaotic environment"
		},
		"Network": {
			"p1": "NeoFS network nodes run the same software and talk the same protocol but may have different roles. There are nodes that store data and process user API requests, they are regular storage nodes that form the Outer Ring. There are nodes that take care of network health, perform service tasks, such as data audit and payments settlements, and form the Inner Ring. There are not many of them and they use dBFT 2.0 consensus algorithm to coordinate their actions.",
			"p2": "Inner Ring nodes are connected to Neo Blockchain. They are constantly monitoring events coming from the blockchain to synchronize their state and the state of NeoFS smart contract that manages users' money deposits and information about Inner Ring nodes themselves.",
			"p3": "Since the Inner Ring is a critical infrastructure part, not every node may get this role. The node willing to join the Inner Ring should be registered in NeoFS smart contract in Neo Blockchain and pay some security deposit that is lost in case of the node starts to behave badly.",
			"p4": "In addition, in the same way as Neo consensus nodes, NeoFS Inner Ring nodes try to achieve maximal possible geographical, political and network decentralization.",
			"p5": "The main use case for NeoFS is DApps's data storage and content distribution. Nowadays most DApps do not store their assets in a decentralized fashion that makes them not really distributed applications. In NeoFS, DApps can upload content and distribute it to clients via protocol gates using standard HTTPS protocol or, for example, using NeoFS API from mobile application.",
			"p6": "DApps can access NeoFS directly from smart contract code. For instance, DApp's smart contract can generate some data and put it into NeoFS rather then storing it in the blockchain. Storing data off-chain is significantly cheaper and easier to deliver to client.",
			"title": "Network"
		},
		"NetworkMap": {
			"p1": "Inner Ring nodes monitor the state of NeoFS storage nodes. Using this information, they maintain up-to-date Network Map. It is a multi-dimensional graph where nodes have attributes and are grouped by those attributes and their values. This allows using a special data placement function to find nodes that would store an object when putting or getting it in/from NeoFS network.",
			"p2": "This approach allows not having any centralized meta-data storage keeping object's locations and not re-balancing data with every joining or leaving storage node, as it happens in DHT-based systems.",
			"title": "Network Map"
		},
		"ProtocolGates": {
			"p1": "To interact with existing systems using standard protocols, NeoFS has protocol gates. Gates are mainly maintained by users and not a part of NeoFS network. From the start, HTTP protocol gate is provided, that allows accessing data from NeoFS using regular browser. Further, AWS S3 and OpenStack Object Storage gates will be provided to allow users to make more sophisticated integrations. Technically one may easily develop own gate by using NeoFS protocol libraries.",
			"title": "Protocol Gates"
		}
	},
	"Services": {
		"SDK": {
			"howto-link": "How to start with NeoFS local SDK",
			"p1": "NeoFS local SDK, which allows deploying locally a full NeoFS network and working with it from neofs-cli, is granted for public access. <a href=\"https://github.com/nspcc-dev/neofs-local\" target=\"_blank\">Github repository</a> contains not only SDK but also <a href=\"https://github.com/nspcc-dev/demo\" target=\"_blank\">demo video </a>on how to deploy NeoFS local, Golang libraries of applied methods such as homomorphic hashing and network map and some other useful stuff.",
			"title": "NeoFS local SDK"
		},
		"SendFS": {
			"p1": "Objects stored on the NeoFS TestNet are distributed across multiple geographically decentralized nodes. Storage nodes are currently located in St Petersburg, New York, Singapore, Amsterdam, London, Bangalore, Toronto, and Frankfurt. At the time of press, files may be uploaded on Send.NeoFS with a user-specified lifetime of 15 minutes, 1 hour, 24 hours, or 48 hours. File uploads are free during the testing phases, with a file size limit of 50Mb.",
			"title": "HTTP-Gate demo: <a href=\"{{neofs_send_url}}\" target=\"_blank\">Send.NeoFS</a> web service allowing users to easily upload files to the NeoFS TestNet"
		},
		"Services": {
			"NeoGO": {
				"desc": "NeoGO nodes status in the Neo Mainnet.",
				"title": "NeoGO nodes status"
			},
			"SDK": {
				"desc": "It allows developers to deploy their own local NeoFS networks, where they may begin testing the solution and integrating support for it into their own applications.",
				"title": "NeoFS SDK"
			},
			"SendFS": {
				"desc": "This is a simple example of integration with NeoFS network via HTTP protocol. It allows storing files in decentralized network for the selected period of time and share them via generated link.",
				"title": "Send.NeoFS"
			},
			"Status": {
				"desc": "Grafana dashboard with real-time data on Send.NeoFS status.",
				"title": "Send.NeoFS Status"
			},
			"TestNet": {
				"desc": "NeoFS Public TestNet release allows developers in the NEO ecosystem to experiment with NeoFS and test potential applications that can make use of decentralized storage facilities.",
				"title": "NeoFS Public TestNet"
			},
			"Wallet": {
				"desc": "Wallet for NeoFS Public TestNet with NeoFS smart contract deposit operation.",
				"title": "Simple Wallet for NeoFS Public TestNet"
			},
			"title": "Services"
		},
		"TestNet": {
			"epoch": "NeoFS epoch:",
			"howto_link": "How to deposit NEP-5 GAS to NeoFS ",
			"loading": "Loading...",
			"p1": "Any node can be used as NeoFS endpoint in the NeoFS CLI.",
			"p2": "We recommend choosing either your own node or the closest one possible.",
			"refresh": "Refresh",
			"title": "NeoFS Public TestNet State",
			"tokens_link": "Get NEP-5 GAS tokens for public NeoFS TestNet"
		}
	},
	"Tokens": {
		"Get": {
			"address": "Ender your Neo Address for NeoFS Testnet:",
			"checkbalance": "Check balance",
			"loading": "Loading...",
			"p1": "Get 5 GAS and 50 Nep-5 GAS Tokens (for Neo2 Testnet). With the transition to the Neo 3.0 TestNet only GAS token will be send. ",
			"p2": "How to connect to NeoFS Neo TestNet and create Neo address <a href=\"/howto\" target=\"_blank\" >can be found here.</a>",
			"processing": "Processing of the transactions: please, be patient until they will be added to block.",
			"send": "Send",
			"title": "Get GAS for public NeoFS Testnet"
		}
	},
	"Wallet": {
		"Main": {
			"address": "Address:",
			"close": "Close",
			"deposit": "Deposit",
			"generate": "Generate New Wallet",
			"info": "Wallet info",
			"loading": "Loading...",
			"nep5deposit": "Enter your NEP-5 GAS tokens amount for deposit to NeoFS balance:",
			"privkey": "Private key:",
			"pubkey": "Public key:",
			"refresh": "Refresh",
			"requestgas": "Request tokens to wallet",
			"requestneofs": "Request tokens to NeoFS account",
			"title": "Simple NeoFS Testnet Wallet",
			"txprocessing": "Processing of the transactions: please, be patient until they will be added to block.",
			"wallet": "Wallet",
			"wif": "WIF: ",
			"wifenter": "Enter your NeoFS Testnet Neo Address WIF or private key:"
		}
	}
}